/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#pragma once

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.douki.Credential */

#define DOUKI_TYPE_CREDENTIAL (douki_credential_get_type ())
#define DOUKI_CREDENTIAL(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DOUKI_TYPE_CREDENTIAL, DoukiCredential))
#define DOUKI_IS_CREDENTIAL(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DOUKI_TYPE_CREDENTIAL))
#define DOUKI_CREDENTIAL_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), DOUKI_TYPE_CREDENTIAL, DoukiCredentialIface))

struct _DoukiCredential;
typedef struct _DoukiCredential DoukiCredential;
typedef struct _DoukiCredentialIface DoukiCredentialIface;

struct _DoukiCredentialIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_generate_password) (
    DoukiCredential *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_name) (
    DoukiCredential *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_password) (
    DoukiCredential *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_set_name) (
    DoukiCredential *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

};

GType douki_credential_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *douki_credential_interface_info (void);
guint douki_credential_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void douki_credential_complete_get_name (
    DoukiCredential *object,
    GDBusMethodInvocation *invocation,
    const gchar *name);

void douki_credential_complete_set_name (
    DoukiCredential *object,
    GDBusMethodInvocation *invocation,
    gboolean result);

void douki_credential_complete_get_password (
    DoukiCredential *object,
    GDBusMethodInvocation *invocation,
    const gchar *password);

void douki_credential_complete_generate_password (
    DoukiCredential *object,
    GDBusMethodInvocation *invocation,
    const gchar *password);



/* D-Bus method calls: */
void douki_credential_call_get_name (
    DoukiCredential *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean douki_credential_call_get_name_finish (
    DoukiCredential *proxy,
    gchar **out_name,
    GAsyncResult *res,
    GError **error);

gboolean douki_credential_call_get_name_sync (
    DoukiCredential *proxy,
    gchar **out_name,
    GCancellable *cancellable,
    GError **error);

void douki_credential_call_set_name (
    DoukiCredential *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean douki_credential_call_set_name_finish (
    DoukiCredential *proxy,
    gboolean *out_result,
    GAsyncResult *res,
    GError **error);

gboolean douki_credential_call_set_name_sync (
    DoukiCredential *proxy,
    const gchar *arg_name,
    gboolean *out_result,
    GCancellable *cancellable,
    GError **error);

void douki_credential_call_get_password (
    DoukiCredential *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean douki_credential_call_get_password_finish (
    DoukiCredential *proxy,
    gchar **out_password,
    GAsyncResult *res,
    GError **error);

gboolean douki_credential_call_get_password_sync (
    DoukiCredential *proxy,
    gchar **out_password,
    GCancellable *cancellable,
    GError **error);

void douki_credential_call_generate_password (
    DoukiCredential *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean douki_credential_call_generate_password_finish (
    DoukiCredential *proxy,
    gchar **out_password,
    GAsyncResult *res,
    GError **error);

gboolean douki_credential_call_generate_password_sync (
    DoukiCredential *proxy,
    gchar **out_password,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define DOUKI_TYPE_CREDENTIAL_PROXY (douki_credential_proxy_get_type ())
#define DOUKI_CREDENTIAL_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DOUKI_TYPE_CREDENTIAL_PROXY, DoukiCredentialProxy))
#define DOUKI_CREDENTIAL_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DOUKI_TYPE_CREDENTIAL_PROXY, DoukiCredentialProxyClass))
#define DOUKI_CREDENTIAL_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DOUKI_TYPE_CREDENTIAL_PROXY, DoukiCredentialProxyClass))
#define DOUKI_IS_CREDENTIAL_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DOUKI_TYPE_CREDENTIAL_PROXY))
#define DOUKI_IS_CREDENTIAL_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DOUKI_TYPE_CREDENTIAL_PROXY))

typedef struct _DoukiCredentialProxy DoukiCredentialProxy;
typedef struct _DoukiCredentialProxyClass DoukiCredentialProxyClass;
typedef struct _DoukiCredentialProxyPrivate DoukiCredentialProxyPrivate;

struct _DoukiCredentialProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  DoukiCredentialProxyPrivate *priv;
};

struct _DoukiCredentialProxyClass
{
  GDBusProxyClass parent_class;
};

GType douki_credential_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DoukiCredentialProxy, g_object_unref)
#endif

void douki_credential_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DoukiCredential *douki_credential_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
DoukiCredential *douki_credential_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void douki_credential_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DoukiCredential *douki_credential_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
DoukiCredential *douki_credential_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define DOUKI_TYPE_CREDENTIAL_SKELETON (douki_credential_skeleton_get_type ())
#define DOUKI_CREDENTIAL_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DOUKI_TYPE_CREDENTIAL_SKELETON, DoukiCredentialSkeleton))
#define DOUKI_CREDENTIAL_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DOUKI_TYPE_CREDENTIAL_SKELETON, DoukiCredentialSkeletonClass))
#define DOUKI_CREDENTIAL_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DOUKI_TYPE_CREDENTIAL_SKELETON, DoukiCredentialSkeletonClass))
#define DOUKI_IS_CREDENTIAL_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DOUKI_TYPE_CREDENTIAL_SKELETON))
#define DOUKI_IS_CREDENTIAL_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DOUKI_TYPE_CREDENTIAL_SKELETON))

typedef struct _DoukiCredentialSkeleton DoukiCredentialSkeleton;
typedef struct _DoukiCredentialSkeletonClass DoukiCredentialSkeletonClass;
typedef struct _DoukiCredentialSkeletonPrivate DoukiCredentialSkeletonPrivate;

struct _DoukiCredentialSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  DoukiCredentialSkeletonPrivate *priv;
};

struct _DoukiCredentialSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType douki_credential_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DoukiCredentialSkeleton, g_object_unref)
#endif

DoukiCredential *douki_credential_skeleton_new (void);


G_END_DECLS
